name: Build GL-MT300N-V2 Custom Firmware
# Created by: Yntools
# Last updated: 2024-01-17 12:17:30

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-20.04
    env:
      WORKDIR: /home/runner/work/mt300n-v2-Fibocom-native/mt300n-v2-Fibocom-native/workspace
      SDK_PATH: openwrt-sdk-19.07.10-ramips-mt76x8_gcc-7.5.0_musl.Linux-x86_64
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache downloads
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.WORKDIR }}/${{ env.SDK_PATH }}/dl
            ${{ env.WORKDIR }}/${{ env.SDK_PATH }}/feeds
          key: ${{runner.os}}-downloads-ramips1907-${{hashFiles('${{ env.WORKDIR }}/${{ env.SDK_PATH }}/feeds.conf.default')}}
          restore-keys: |
            ${{runner.os}}-downloads-ramips1907-

      - name: Cache toolchain
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.WORKDIR }}/${{ env.SDK_PATH }}/staging_dir
            ${{ env.WORKDIR }}/${{ env.SDK_PATH }}/build_dir
          key: ${{runner.os}}-toolchain-ramips1907-${{hashFiles('${{ env.WORKDIR }}/${{ env.SDK_PATH }}/.config')}}
          restore-keys: |
            ${{runner.os}}-toolchain-ramips1907-

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            asciidoc \
            bash \
            bc \
            binutils \
            build-essential \
            bzip2 \
            fastjar \
            flex \
            gawk \
            gcc \
            gettext \
            git \
            intltool \
            libgtk2.0-dev \
            libncurses5-dev \
            libssl-dev \
            make \
            patch \
            perl-modules \
            python2.7-dev \
            python3 \
            python3-distutils \
            python3-setuptools \
            rsync \
            ruby \
            sdcc \
            subversion \
            unzip \
            util-linux \
            wget \
            xsltproc \
            zlib1g-dev

      # Шаг 1: Клонируем SDK и инициализируем
      - name: Setup GL.iNet SDK
        run: |
          # Создаем рабочую директорию
          mkdir -p "$WORKDIR"
          cd "$WORKDIR"
          
          # Скачиваем SDK напрямую
          wget https://downloads.openwrt.org/releases/19.07.10/targets/ramips/mt76x8/openwrt-sdk-19.07.10-ramips-mt76x8_gcc-7.5.0_musl.Linux-x86_64.tar.xz
          
          # Распаковываем SDK
          tar xf openwrt-sdk-19.07.10-ramips-mt76x8_gcc-7.5.0_musl.Linux-x86_64.tar.xz
          
          cd $SDK_PATH
          
          # Обновляем и устанавливаем базовые feeds
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          
          # Добавляем feed для модемов
          echo "src-git modemfeed https://github.com/koshev-msk/modemfeed.git" >> feeds.conf.default
          
          # Важно: сначала обновить feed
          ./scripts/feeds update modemfeed
          # Затем установить все пакеты из feed
          ./scripts/feeds install -a -p modemfeed
          
          # Показываем финальную структуру
          ls -la
          pwd

      # Шаг 2: Конфигурируем сборку
      - name: Configure build
        working-directory: ${{ env.WORKDIR }}/${{ env.SDK_PATH }}
        run: |
          # Создаем базовую конфигурацию
          make defconfig
          
          # Конфигурируем необходимые пакеты
          echo "CONFIG_PACKAGE_modeminfo=y" >> .config
          echo "CONFIG_PACKAGE_luci-app-modeminfo=y" >> .config
          echo "CONFIG_PACKAGE_modeminfo-serial-xmm=y" >> .config
          echo "CONFIG_PACKAGE_modeminfo-serial-fibocom=y" >> .config
          echo "CONFIG_PACKAGE_luci-i18n-modeminfo-ru=y" >> .config
          echo "CONFIG_PACKAGE_atinout=y" >> .config
          echo "CONFIG_PACKAGE_luci-app-atinout=y" >> .config
          echo "CONFIG_PACKAGE_luci-i18n-atinout-ru=y" >> .config
          
          # Пересобираем конфигурацию
          make defconfig

      # Шаг 3: Собираем прошивку
      - name: Build firmware
        working-directory: ${{ env.WORKDIR }}/${{ env.SDK_PATH }}
        env:
          FORCE_UNSAFE_CONFIGURE: 1
        run: |
          # Очищаем кэш сборки если он есть
          make clean
          
          # Обновляем feeds еще раз перед сборкой
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          
          # Скачиваем исходники с подробным выводом
          make download -j1 V=s
          
          # Проверяем наличие директории dl/
          ls -la dl/
          
          # Собираем только нужные нам пакеты
          make package/modeminfo/{clean,compile} V=s
          make package/luci-app-modeminfo/{clean,compile} V=s
          make package/modeminfo-serial-xmm/{clean,compile} V=s
          make package/modeminfo-serial-fibocom/{clean,compile} V=s
          make package/luci-i18n-modeminfo-ru/{clean,compile} V=s
          make package/atinout/{clean,compile} V=s
          make package/luci-app-atinout/{clean,compile} V=s
          make package/luci-i18n-atinout-ru/{clean,compile} V=s

      # Шаг 4: Проверяем результаты сборки
      - name: Check build results
        working-directory: ${{ env.WORKDIR }}/${{ env.SDK_PATH }}
        run: |
          echo "Checking built packages:"
          find bin/packages/ -type f -name "*.ipk" -ls
          
          echo "Checking logs:"
          find logs/ -type f -name "*.txt" -ls

      # Шаг 5: Собираем артефакты
      - name: Collect artifacts
        uses: actions/upload-artifact@v4
        with:
          name: gl-mt300n-v2-packages
          path: |
            ${{ env.WORKDIR }}/${{ env.SDK_PATH }}/bin/packages/**/*.ipk
            ${{ env.WORKDIR }}/${{ env.SDK_PATH }}/logs/*.txt
          retention-days: 5